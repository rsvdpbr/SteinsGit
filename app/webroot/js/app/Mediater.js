// Generated by CoffeeScript 1.3.3

dojo.provide('app.Mediater');

dojo.declare('app.Mediater', null, {
  data: {},
  constructor: function() {
    dojo.subscribe('Mediater/register', this, this.register);
    return dojo.subscribe('Mediater/call', this, this.call);
  },
  register: function(name, context, process) {
    console.log('Mediater> register ' + name, context, typeof process);
    if (!(this.data[name] != null)) {
      this.data[name] = [];
    }
    this.data[name].push({
      'context': context,
      'process': process
    });
    return dojo.connect(context, 'destroy', this, function() {
      console.log('DESTROY', this);
      return this.unregister(name, context, process);
    });
  },
  unregister: function(name, context, process) {
    var index, val, _i, _len, _ref, _results;
    console.log('Mediater> unregister ' + name, context, typeof process);
    if (this.data[name] != null) {
      _ref = this.data[name];
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        val = _ref[index];
        if ((val != null) && val.context === context && val.process === process) {
          delete this.data[name][index];
          _results.push(this.data[name].splice(index, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  },
  call: function(name, args) {
    var i, _i, _len, _ref, _results;
    console.log('Mediater> ' + name + ' called with ', args);
    if (!(this.data[name] != null)) {
      return console.log('Mediater> there is no process about ' + name);
    }
    _ref = this.data[name];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (typeof i.process === 'function') {
        _results.push(i.process.call(i.context, args));
      } else if (typeof i.process === 'string') {
        _results.push(dojo.publish(i.process, args));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  }
});
